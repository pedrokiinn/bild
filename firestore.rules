rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      // Check if the user's document in Firestore has the 'admin' role.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(resourceId) {
        // Check if the requesting user's ID matches a given resource ID.
        return request.auth.uid == resourceId;
    }
    
    // Default rule: Deny all reads and writes unless explicitly allowed.
    // This is a secure default.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    // Defines access control for user documents.
    match /users/{userId} {
      // Allow anyone to check for existing usernames and create new accounts.
      // This is crucial for registration and login flows.
      allow list, create: if true;
      
      // Allow a user to read their own data, or an admin to read any user's data.
      allow get: if request.auth != null && (isOwner(userId) || isAdmin());
      
      // Allow a user to update their own data, or an admin to update any user's data.
      allow update: if request.auth != null && (isOwner(userId) || isAdmin());
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Vehicles Collection
    // Defines access control for vehicle documents.
    match /vehicles/{vehicleId} {
      // Allow any authenticated user to read the list and individual vehicles.
      // This is necessary for the dashboard and checklist pages.
      allow list, get: if request.auth != null;
      
      // Only admins can create, update, or delete vehicles.
      allow create, update, delete: if isAdmin();
    }

    // Checklists Collection
    // Defines access control for daily checklist documents.
    match /checklists/{checklistId} {
      // Any authenticated user can list and get checklists.
      // Required for the history and dashboard pages.
      allow list, get: if request.auth != null;
      
      // Any authenticated user can create a checklist.
      allow create: if request.auth != null;
      
      // A checklist can be updated by its creator (driver) or an admin.
      // Note: Assumes driverId is stored on the checklist document.
      allow update: if request.auth != null && (get(/databases/$(database)/documents/checklists/$(checklistId)).data.driverName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.name || isAdmin());

      // Only admins can delete checklists.
      allow delete: if isAdmin();
    }

    // Deletion Reports Collection
    // Access is strictly limited to administrators.
    match /deletionReports/{reportId} {
      allow read, write: if isAdmin();
    }
  }
}
