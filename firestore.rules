rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // READ: Admins can read all users. A user can read their own data.
      allow read: if request.auth != null && (isAdmin() || isOwner(userId));

      // CREATE: Allow user creation (registration) for any authenticated user if the role is 'collaborator' or if it's the first user (admin).
      // This is generally handled by backend logic, but we can set a rule.
      // A more secure approach is to use a Cloud Function for user creation.
      // For simplicity here, we allow authenticated users to create their own doc.
      allow create: if request.auth != null && isOwner(userId);

      // UPDATE: Admins can update any user. A user can only update their own data (but not their role).
      allow update: if request.auth != null && 
                    (isAdmin() || 
                    (isOwner(userId) && request.resource.data.role == resource.data.role));
      
      // DELETE: Only admins can delete users.
      allow delete: if request.auth != null && isAdmin();
    }

    // Vehicles Collection
    match /vehicles/{vehicleId} {
      // READ: Any authenticated user can read vehicle information.
      allow read: if request.auth != null;

      // CREATE, UPDATE, DELETE: Only admins can manage the vehicle fleet.
      allow write: if request.auth != null && isAdmin();
    }

    // Checklists Collection
    match /checklists/{checklistId} {
      // READ: Any authenticated user can read checklists.
      allow read: if request.auth != null;

      // CREATE: Any authenticated user can create a checklist.
      // The user creating must be the driver listed.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.driverId;
      
      // UPDATE: Only an admin or the user who created the checklist can update it (e.g., to add arrival info).
      allow update: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.driverId);

      // DELETE: Only admins can delete checklist records.
      allow delete: if request.auth != null && isAdmin();
    }

    // Deletion Reports Collection
    match /deletionReports/{reportId} {
      // Only admins can read or write deletion reports.
      allow read, write: if request.auth != null && isAdmin();
    }
  }
}
